import Config

# Load environment variables from .env file in development
if File.exists?(".env") do
  File.stream!(".env")
  |> Stream.map(&String.trim/1)
  # Ignore blank lines and comments
  |> Stream.reject(&(&1 == "" or String.starts_with?(&1, "#")))
  |> Enum.each(fn line ->
    case String.split(line, "=", parts: 2) do
      [key, value] ->
        System.put_env(String.trim(key), String.trim(value))

      _ ->
        :ok
    end
  end)
end

# Configure your database
config :soundboard, Soundboard.Repo,
  database: "database.db",
  adapter: Ecto.Adapters.SQLite3

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :soundboard, SoundboardWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: 4000],
  url: [host: "localhost", port: 4000, scheme: "http"],
  # Disable origin checking in development
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "laSmvB14g0LPfP6MUsdEvsdx3ABBM3lU1LjXJoMnVNxFv3+xKgd2lb7eFcaVl9gt",
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:soundboard, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:soundboard, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :soundboard, SoundboardWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/soundboard_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :soundboard, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :phoenix_live_view,
  # Include HEEx debug annotations as HTML comments in rendered markup
  debug_heex_annotations: true,
  # Enable helpful, but potentially expensive runtime checks
  enable_expensive_runtime_checks: true

# Disable swoosh api client as it is only required for production adapters.
config :swoosh, :api_client, false

config :soundboard, env: :dev

config :soundboard, :dashboard,
  username: "christo",
  password: "testing123@"

host = System.get_env("PHX_HOST") || "localhost:4000"
scheme = System.get_env("SCHEME") || "http"

# Configure Discord OAuth
config :ueberauth, Ueberauth.Strategy.Discord.OAuth,
  client_id: System.get_env("DISCORD_CLIENT_ID"),
  client_secret: System.get_env("DISCORD_CLIENT_SECRET"),
  redirect_uri: "#{scheme}://#{host}/auth/discord/callback"

# Store token for application use (bot will fetch it from here)
config :soundboard,
  discord_token: System.get_env("DISCORD_TOKEN")

# Configure Nostrum with optimized audio settings for faster playback
config :nostrum,
  # Reduce audio buffering for faster playback
  # Reduced from default 10 (40ms instead of 200ms)
  audio_frames_per_burst: 2,
  # Reduced from default 20_000ms
  audio_timeout: 5_000
